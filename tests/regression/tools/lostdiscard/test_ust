#!/bin/bash
#
# Copyright (C) - 2016 Julien Desfossez <jdesfossez@efficios.com>
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; version 2.1 of the License.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
TEST_DESC="Packet lost / Events discarded accounting - User space tracing"

CURDIR=$(dirname $0)/
TESTDIR=$CURDIR/../../..
NR_ITER=10000
NR_USEC_WAIT=0
TESTAPP_PATH="$TESTDIR/utils/testapp"
TESTAPP_NAME="gen-ust-events"
TESTAPP_BIN="$TESTAPP_PATH/$TESTAPP_NAME/$TESTAPP_NAME"
SESSION_NAME="stream"
EVENT_NAME="tp:tptest"

TRACE_PATH=$(mktemp -d)

NUM_TESTS=140

source $TESTDIR/utils/utils.sh
source $TESTDIR/regression/tools/lostdiscard/common.sh
if test $? != 0; then
	fail "Import common functions"
	return
fi

if [ ! -x "$TESTAPP_BIN" ]; then
	BAIL_OUT "No UST events binary detected."
fi

function test_ust_discard ()
{
	diag "Test UST local with discard mode"
	for i in $(seq 1 10); do
		create_lttng_session_ok $SESSION_NAME $TRACE_PATH
		enable_channel_small --discard $SESSION_NAME chan1 -u
		enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME chan1

		start_lttng_tracing_ok $SESSION_NAME

		$TESTAPP_BIN $NR_ITER $NR_USEC_WAIT /dev/null 2>&1

		stop_lttng_tracing_ok $SESSION_NAME
		lttng_list_discarded $SESSION_NAME
		discarded1=$?
		destroy_lttng_session_ok $SESSION_NAME
		# Validate test
		validate_discarded $TRACE_PATH
		discarded2=$?
		if test $discarded1 = $discarded2; then
			ok 0 "Discard counter match ($discarded1)"
		else
			fail "Discard counter does not match ($discarded1 vs $discarded2)"
		fi
		if [ $? -eq 0 ]; then
			# Only delete if successful
			rm -rf $TRACE_PATH
		fi
		if test $discarded1 -gt 0; then
			break
		fi
	done
}

function test_ust_overwrite ()
{
	diag "Test UST local with overwrite mode"
	check_babeltrace_version
	if test $? != 0; then
		skip 0 "Babeltrace too old for this feature, 1.4 or 2.0 required"
		return
	fi
	for i in $(seq 1 10); do
		create_lttng_session_ok $SESSION_NAME $TRACE_PATH
		enable_channel_small --overwrite $SESSION_NAME chan1 -u
		enable_ust_lttng_event_ok $SESSION_NAME $EVENT_NAME chan1

		start_lttng_tracing_ok $SESSION_NAME

		$TESTAPP_BIN $NR_ITER $NR_USEC_WAIT /dev/null 2>&1

		stop_lttng_tracing_ok $SESSION_NAME
		lttng_list_lost $SESSION_NAME
		lost1=$?
		destroy_lttng_session_ok $SESSION_NAME
		# Validate test
		validate_lost $TRACE_PATH
		lost2=$?
		if test $lost1 = $lost2; then
			ok 0 "Lost counter match ($lost1)"
		else
			fail "Lost counter does not match ($lost1 vs $lost2)"
		fi
		if [ $? -eq 0 ]; then
			# Only delete if successful
			rm -rf $TRACE_PATH
		fi
		if test $lost1 -gt 0; then
			break
		fi
	done
}

# no plan because we do the same test up to 10 times if no events are
# lost or discarded
plan_no_plan

print_test_banner "$TEST_DESC"

start_lttng_sessiond

tests=( test_ust_overwrite test_ust_discard )

for fct_test in ${tests[@]};
do
	SESSION_NAME=$(randstring 16 0)
	${fct_test}
done

stop_lttng_sessiond

exit $out
